pipeline {
  agent any

  environment {
    DOCKER_IMAGE = "prembablu/healthcare:1.0"
    PEM_FILE = "./terraform_files/new.pem"
    REGION = "us-east-1"
  }

  stages {

    stage('Git Checkout') {
      steps {
        echo ' Cloning repository...'
        git branch: 'master', url: 'https://github.com/gitbablu/star-agile-health-care.git'
      }
    }

    stage('Build & Package') {
      steps {
        echo ' Building Maven project...'
        sh 'mvn clean package -DskipTests'
      }
    }

    stage('Build Docker Image') {
      steps {
        echo ' Building Docker image...'
        sh "docker build -t ${DOCKER_IMAGE} ."
      }
    }

    stage('Docker Login & Push') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'docker', passwordVariable: 'DOCKER_PASS', usernameVariable: 'DOCKER_USER')]) {
          sh 'echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin'
        }
        echo ' Pushing image to Docker Hub...'
        sh "docker push ${DOCKER_IMAGE}"
      }
    }

    stage('Provision EC2 using Terraform') {
      steps {
        dir('terraform_files') {
          echo " Initializing and applying Terraform configuration..."
          sh 'terraform init -input=false'
          sh 'terraform validate'
          sh 'terraform apply -auto-approve'
          
          // Fetch the EC2 public IP safely
          script {
            env.EC2_IP = sh(script: "terraform output -raw public_ip | tr -d '\\r\\n'", returnStdout: true).trim()
            echo " EC2 Instance Public IP: ${env.EC2_IP}"
          }

          // Allow instance time to initialize
          sh 'sleep 40'
        }
      }
    }

    stage('Deploy Kubernetes on EC2') {
      steps {
        echo " Deploying Kubernetes manifests to EC2 instance..."

        // Fix permissions and copy files
        sh '''
          echo " Copying deployment and service YAML files to EC2..."
          chmod 600 ${PEM_FILE}
          scp -o StrictHostKeyChecking=no -i ${PEM_FILE} deployment.yml ubuntu@${EC2_IP}:/home/ubuntu/
          scp -o StrictHostKeyChecking=no -i ${PEM_FILE} service.yml ubuntu@${EC2_IP}:/home/ubuntu/
        '''

        // Apply Kubernetes manifests remotely
        script {
          try {
            sh "ssh -o StrictHostKeyChecking=no -i ${PEM_FILE} ubuntu@${EC2_IP} 'kubectl apply -f /home/ubuntu/'"
          } catch (err) {
            echo " First kubectl apply failed â€” retrying once..."
            sh "ssh -o StrictHostKeyChecking=no -i ${PEM_FILE} ubuntu@${EC2_IP} 'kubectl apply -f /home/ubuntu/'"
          }
        }
      }
    }
  }

  post {
    always {
      echo ' Pipeline completed (check above logs for status).'
    }
  }
}
