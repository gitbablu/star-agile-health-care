pipeline {
  agent any

  environment {
    DOCKER_IMAGE = "prembablu/healthcare:1.0"
    PEM_FILE = "./terraform_files/new.pem"
    REGION = "us-east-1"
  }

  stages {

    stage('Git Checkout') {
      steps {
        echo 'üì¶ Cloning repository...'
        git branch: 'master', url: 'https://github.com/gitbablu/star-agile-health-care.git'
      }
    }

    stage('Build & Package') {
      steps {
        echo 'üîß Building Maven project...'
        sh 'mvn clean package -DskipTests'
      }
    }

    stage('Build Docker Image') {
      steps {
        echo 'üê≥ Building Docker image...'
        sh "docker build -t ${DOCKER_IMAGE} ."
      }
    }

    stage('Docker Login & Push') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'docker', passwordVariable: 'DOCKER_PASS', usernameVariable: 'DOCKER_USER')]) {
          sh 'echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin'
        }
        echo 'üöÄ Pushing image to Docker Hub...'
        sh "docker push ${DOCKER_IMAGE}"
      }
    }

    stage('setting the Kubernetes Cluster') {
  steps {
    dir('terraform_files') {
      echo "Initializing and applying Terraform configuration..."
      sh 'terraform init -input=false'
      sh 'terraform validate'
      sh 'terraform apply -auto-approve'
      
      // Fetch public IP output safely (removes colors/newlines)
      script {
        env.EC2_IP = sh(script: "terraform output -raw public_ip | tr -d '\\r\\n'", returnStdout: true).trim()
        echo "‚úÖ EC2 Instance Public IP: ${env.EC2_IP}"
      }
      
      // Wait a bit for the instance to be ready
      sh 'sleep 30'
    }
  }
}

stage('Deploy Kubernetes') {
  steps {
    echo "Deploying Kubernetes manifests to EC2 instance..."
    
    // Copy deployment and service YAMLs to EC2
    sh '''
      echo "Copying deployment and service YAML files to EC2..."
      sudo scp -o StrictHostKeyChecking=no -i ./terraform_files/new.pem deployment.yml ubuntu@${EC2_IP}:/home/ubuntu/
      sudo scp -o StrictHostKeyChecking=no -i ./terraform_files/new.pem service.yml ubuntu@${EC2_IP}:/home/ubuntu/
    '''
    
    // Run kubectl apply remotely
    script {
      try {
        sh "ssh -o StrictHostKeyChecking=no -i ./terraform_files/new.pem ubuntu@${EC2_IP} 'kubectl apply -f /home/ubuntu/'"
      } catch (err) {
        echo "‚ö†Ô∏è First kubectl apply failed ‚Äî retrying once..."
        sh "ssh -o StrictHostKeyChecking=no -i ./terraform_files/new.pem ubuntu@${EC2_IP} 'kubectl apply -f /home/ubuntu/'"
      }
    }
  }
}
